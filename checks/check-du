#!/usr/bin/env perl

use strict;
use warnings;
use Bloonix::Plugin;

#------------------------------------------------------------------------------
#
# Author      : Ebow Halm <ejh@cpan.org>
# Date        : Feb 2017
# Description : Bloonix plugin to check directory size.
# License     : Apache 2.0. Copyright (C) 2017 Ebow Halm.
#
#------------------------------------------------------------------------------

###########     Integrate into Bloonix plugin infrastructure.      ############

my $plugin = Bloonix::Plugin->new( version => '0.5' );
$plugin->info(
    join( " ",
        "This plugin checks the size and inode count of a directory.",
        "To do this, it requires a cron job to be run.",
        "The script the cron job should run has been installed to: ",
        "'/usr/lib/bloonix/etc/cron/cron-du'.",
        "To setup this plugin to check the size of the /var/www directory",
        "for example, first choose a unique identifier (eg 'var_www').",
        "Enter 'var_www' as the value of the Identifier value under",
        "Check settings.",
        "Then create a cronjob that has 'var_www' and '/var/www' passed",
        "to the cron script '/usr/lib/bloonix/etc/cron/cron-du' like this: ",
        "* */1 * * * /usr/lib/bloonix/etc/cron/cron-du var_www /var/www",
    )
);
$plugin->add_option(
    name        => 'Identifier',
    option      => 'identifier',
    description => 'Unique identifier for this check',
    value_type  => 'string',
    example     => 'my_identifier',
    mandatory   => 1,
);

$plugin->has_threshold(
    keys => [ { key => 'inodes' }, { key => 'size', unit => 'bytes' } ] );

$plugin->example(
    description =>
        'Warn when directory is greater than 1MB or has more than 100 inodes',
    arguments => [
        identifier => 'my_identifier',
        critical   => "inodes:gt:100",
        warning    => "size:gt:1MB",
    ]
);

my $opt = $plugin->parse_options;

#------------------------------------------------------------------------------

###########     Verify basic pre-requisites are satisfied.         ############
#
# 1. File exists, is not empty, and its contents can be read.
# 2. Data format matches expectations.
#
# File format is almost but not quite JSON; the attributes (inodes, size) are
# not quoted. An example is:
#
# {
#   inodes: 22,
#   size: 47593
# }

local $/;
my $file = "/var/cache/bloonix/du_$opt->{identifier}.txt";
open( my $fh, "<", $file )
    or $plugin->exit(
    status  => 'UNKNOWN',
    message => "Cannot open $file: $!."
    );

my $output = <$fh>;
close($fh);
my $stats;

while ( $output =~ /([a-z]++)\s*+:\s*+([0-9]++)/gcm ) {
    $stats->{$1} = $2;
}

unless ( exists $stats->{size} && exists $stats->{inodes} ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => "$file must have 'size' and 'inodes' attributes."
    );
}

# Both attributes must have integer values.
unless ( $stats->{size} =~ /^[0-9]+$/ && $stats->{inodes} =~ /^[0-9]+$/ ) {
    $plugin->exit(
        status => 'UNKNOWN',
        message =>
            "$file 'size' and 'inodes' attribute values must be integers."
    );
}

$plugin->check_thresholds(
    stats       => $stats,
    upshot_keys => [qw(inodes size)],
    exit        => "yes"
);

#------------------------------------------------------------------------------
