#!/usr/bin/env perl

use strict;
use warnings;
use Bloonix::Plugin;

#------------------------------------------------------------------------------
#
# Author      : Ebow Halm <ejh@cpan.org>
# Date        : Feb 2017
# Description : Bloonix plugin to check directory size.
# License     : Apache 2.0. Copyright (C) 2017 Ebow Halm.
#
#------------------------------------------------------------------------------

###########     Integrate into Bloonix plugin infrastructure.      ############

my $plugin = Bloonix::Plugin->new( version => '0.3' );

$plugin->add_option(
    name        => 'File',
    option      => 'file',
    description => 'File where cron job du command result written',
    value_type  => 'string',
    mandatory   => 1,
);

$plugin->has_threshold(
    keys => [ { key => 'inodes' }, { key => 'size', unit => 'bytes' } ] );

$plugin->example(
    description =>
        'Warn when directory is greater than 1MB or has more than 100 inodes',
    arguments => [
        file     => '/var/tmp/du-result-for-some-directory.txt',
        critical => "inodes:gt:100",
        warning  => "size:gt:1MB",
    ]
);

my $opt = $plugin->parse_options;

#------------------------------------------------------------------------------

###########     Verify basic pre-requisites are satisfied.         ############
#
# 1. File exists, is not empty, and its contents can be read.
# 2. Data format matches expectations.
#
# File format is almost but not quite JSON; the attributes (inodes, size) are
# not quoted. An example is:
#
# {
#   inodes: 22,
#   size: 47593
# }

local $/;
open( my $fh, "<", $opt->{file} )
    or $plugin->exit(
    status  => 'UNKNOWN',
    message => "Cannot open $opt->{file}: $!."
    );

my $output = <$fh>;
close($fh);
my $stats;

while ( $output =~ /([a-z]++)\s*+:\s*+([0-9]++)/gcm ) {
    $stats->{$1} = $2;
}

unless ( exists $stats->{size} && exists $stats->{inodes} ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => "$opt->{file} must have 'size' and 'inodes' attributes."
    );
}

# Both attributes must have integer values.
unless ( $stats->{size} =~ /^[0-9]+$/ && $stats->{inodes} =~ /^[0-9]+$/ ) {
    $plugin->exit(
        status => 'UNKNOWN',
        message =>
            "$opt->{file} 'size' and 'inodes' attribute values must be integers."
    );
}

$plugin->check_thresholds(
    stats       => $stats,
    upshot_keys => [qw(inodes size)],
    exit        => "yes"
);

#------------------------------------------------------------------------------
