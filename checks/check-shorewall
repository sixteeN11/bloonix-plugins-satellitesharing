#!/usr/bin/env perl

use strict;
use warnings;
use Bloonix::Plugin;

#------------------------------------------------------------------------------
#
# Author      : Ebow Halm <ejh@cpan.org>
# Created     : Feb 2017.
# Description : Shorewall Bloonix plugin to check rules and alert on thresholds.
# License     : Apache 2.0. Copyright (C) 2017 Ebow Halm.
#
#------------------------------------------------------------------------------

###########     Integrate into Bloonix plugin infrastructure.      ############

my $plugin = Bloonix::Plugin->new( version => '0.2' );

$plugin->add_option(
    name        => 'Firewall chain',
    option      => 'chain',
    description => 'Firewall chain',
    value_type  => 'string',
    mandatory   => 1,
    example     => 'INPUT',
);

$plugin->add_option(
    name        => 'Target',
    option      => 'target',
    description => 'Target',
    value_type  => 'string',
    example     => 'traffic',
);

$plugin->add_option(
    name        => 'Incoming interface',
    option      => 'in',
    description => 'Incoming interface',
    value_type  => 'string',
    example     => 'eth1',
);

$plugin->add_option(
    name        => 'Outgoing interface',
    option      => 'out',
    description => 'Outgoing interface',
    value_type  => 'string',
    example     => 'eth0',
);

$plugin->add_option(
    name        => 'Source IP/network',
    option      => 'source',
    description => 'Source IP address or network',
    value_type  => 'string',
    example     => '0.0.0.0/0',
);

$plugin->add_option(
    name        => 'Destination IP/network',
    option      => 'destination',
    description => 'Destination IP address or network',
    value_type  => 'string',
    example     => '0.0.0.0/0',
);

$plugin->add_option(
    name        => 'Protocol',
    option      => 'prot',
    description => 'Protocol',
    value_type  => 'string',
    example     => 'all',
);

$plugin->add_option(
    name        => 'Opt',
    option      => 'opt',
    description => 'Opt',
    value_type  => 'string',
    example     => '--',
);

$plugin->has_threshold(
    keys => [ { key => 'pkts' }, { key => 'bytes', unit => 'bytes' }, ] );

my $opt = $plugin->parse_options;

#------------------------------------------------------------------------------

###########     Verify basic pre-requisites are satisfied.         ############
#
# 1. Can execute shorewall command.

# Cannot rely on shorewall's exit status to determine success of command.

my $exe;
chomp( $exe = `which shorewall` );
unless ($exe) {
    $plugin->exit(
        status => 'UNKNOWN',
        message =>
            "Cannot find 'shorewall' command. Has shorewall been installed?"
    );
}

my $cmd = "$exe show $opt->{chain} 2>&1";
my @output;
eval { @output = `$cmd`; };

if ( $? == -1 ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => "Failed to execute: $!"
    );
}

if ( $? & 127 ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => 'shorewall command died with signal ' . ( $? & 127 ) . '.'
    );
}

#------------------------------------------------------------------------------

use constant {
    PACKETS     => 0,
    BYTES       => 1,
    TARGET      => 2,
    PROTOCOL    => 3,
    OPT         => 4,
    IN          => 5,
    OUT         => 6,
    SOURCE      => 7,
    DESTINATION => 8,
};

#------------------------------------------------------------------------------

########   shorewall command successfully executed, interpret data.  ##########

# The user could have chosen to filter by any combination of seven of the
# output columns (target, in, out, source, destination, opt, and prot). Only
# one row should match; we use the first matching row.

my ( @filters, @cols );

if ( $opt->{target} ) {
    push @filters, $opt->{target};
    push @cols,    TARGET;
}

if ( $opt->{in} ) {
    push @filters, $opt->{in};
    push @cols,    IN;
}

if ( $opt->{out} ) {
    push @filters, $opt->{out};
    push @cols,    OUT;
}

if ( $opt->{source} ) {
    push @filters, $opt->{source};
    push @cols,    SOURCE;
}

if ( $opt->{destination} ) {
    push @filters, $opt->{destination};
    push @cols,    DESTINATION;
}

if ( $opt->{opt} ) {
    push @filters, $opt->{opt};
    push @cols,    OPT;
}

if ( $opt->{prot} ) {
    push @filters, $opt->{prot};
    push @cols,    PROTOCOL;
}

# Find row that matches the user's filters.

chomp(@output);
my $data;
LINE: foreach my $line (@output) {

    unless ($data) {
        $data = 1 if $line =~ /^\s+pkts\s+bytes/;
        next;
    }

    $line =~ s/^\s+//;
    next unless $line;

    my @columns = split /\s+/, $line;

    for ( my $i = 0; $i < @cols; $i++ ) {
        next LINE if $columns[ $cols[$i] ] ne $filters[$i];
    }

    # This row matches passes the user's filters.
    my $stats = {
        bytes => raw_number( $columns[BYTES] ),
        pkts  => raw_number( $columns[PACKETS] )
    };

    $plugin->delta( stat => $stats, keys => [qw(bytes pkts)] );

    $plugin->check_thresholds(
        stats       => $stats,
        upshot_keys => [qw(pkts bytes)],
        exit        => "yes"
    );

}

# No row matched the user's filters, return error.
$plugin->exit(
    status  => 'UNKNOWN',
    message => "No matching row in '$opt->{chain}' chain. "
        . "Have the appropriate firewall rules been defined?"
);

#------------------------------------------------------------------------------

use constant {
    KILOBYTE => 1024,
    MEGABYTE => 1048576,
    GIGABYTE => 1073741824,
    TERABYTE => 1099511627776,
    PETABYPE => 1125899906842624,
    EXABYTE  => 1152921504606846976
};

sub raw_number {
    my $number = shift;
    if ( $number =~ /^([0-9]+)([a-zA-Z])$/ ) {
        if ( "\U$2" eq 'K' ) {
            $number = $1 * KILOBYTE;
        } elsif ( "\U$2" eq 'M' ) {
            $number = $1 * MEGABYTE;
        } elsif ( "\U$2" eq 'G' ) {
            $number = $1 * GIGABYTE;
        } elsif ( "\U$2" eq 'T' ) {
            $number = $1 * TERABYTE;
        } elsif ( "\U$2" eq 'P' ) {
            $number = $1 * PETABYPE;
        } elsif ( "\U$2" eq 'E' ) {
            $number = $1 * EXABYTE;
        }
    }
    return $number;
}

#------------------------------------------------------------------------------
