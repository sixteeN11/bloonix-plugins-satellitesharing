#!/usr/bin/env perl

use strict;
use warnings;
use Bloonix::Plugin;
use JSON;

#------------------------------------------------------------------------------
#
# Author      : Ebow Halm <ejh@cpan.org>
# Created     : Feb 2017.
# Description : Bloonix plugin to check status of docker instance.
# License     : Apache 2.0. Copyright (C) 2017 Ebow Halm.
#
#------------------------------------------------------------------------------

###########     Integrate into Bloonix plugin infrastructure.      ############

my $plugin = Bloonix::Plugin->new( version => '0.4' );

$plugin->has_timeout( default => 10 );
$plugin->add_option(
    name        => 'Container Name or ID',
    option      => 'container',
    description => 'Container name or id',
    value_type  => 'string',
    mandatory   => 1,
    example     => 'f4c74eb027cf',
);

$plugin->example(
    description => "Verify that the container 'f4c74eb027cf' is running",
    arguments   => [ container => 'f4c74eb027cf' ]
);

my $opt = $plugin->parse_options;

#------------------------------------------------------------------------------

###########     Verify basic pre-requisites are satisfied.         ############
#
# 1. Can execute docker command.
#

my $exe;
unless ( $opt->{test} ) {
    chomp( $exe = `which docker` );
    unless ($exe) {
        $plugin->exit(
            status  => 'UNKNOWN',
            message => "Cannot find 'docker' command."
        );
    }
}

my $output;
my $cmd
    = $opt->{test}
    ? "cat $opt->{test} 2>&1"
    : "docker inspect $opt->{container} | grep Status 2>&1";

eval {
    local $SIG{ALRM} = sub { die "alarm\n" };    # NB: \n required
    alarm $opt->{timeout};
    chomp( $output = `$cmd` );
    alarm(0);
};
if ($@) {
    $plugin->exit(
        status  => 'CRITICAL',
        message => $@ eq "alarm\n"
        ? "Timed out after $opt->{timeout} seconds."
        : $@
    );
}

if ( $? == -1 ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => "Failed to execute: $!"
    );
}

if ( $? & 127 ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => 'docker command died with signal ' . ( $? & 127 ) . '.'
    );
}

if ( $? >> 8 ) {
    $plugin->exit(
        status  => 'UNKNOWN',
        message => $output
    );
}

#------------------------------------------------------------------------------

##########       Command successfully executed, process status.    ############

my ($message) = $output =~ /"Status"\s*+:\s*+"([^"]+)"/gm;
my $status = $message eq 'running' ? 'OK' : 'CRITICAL';

my @lines;
eval { @lines = `docker stats --no-stream $opt->{container}` };

chomp( $lines[1] );
my ($container, $cpu,     $mem_usage, $mem_limit, $mem_pct,
    $net_in,    $net_out, $blk_in,    $blk_out
) = split /(?:\s{2,}|\s+\/\s+)/, $lines[1];

s/[% ]//
    foreach ( $cpu, $mem_usage, $mem_limit, $mem_pct, $net_in, $net_out,
    $blk_in, $blk_out );
$_ = bytes($_)
    foreach ( $mem_usage, $mem_limit, $net_in, $net_out, $blk_in, $blk_out );

$plugin->exit(
    status  => $status,
    message => $message,
    stats   => {
        cpu       => $cpu,
        mem_usage => $mem_usage,
        mem_limit => $mem_limit,
        mem_pct   => $mem_pct,
        net_in    => $net_in,
        net_out   => $net_out,
        blk_in    => $blk_in,
        blk_out   => $blk_out,
    }
);

#------------------------------------------------------------------------------

use constant {
    KILOBYTE => 1024,
    MEGABYTE => 1048576,
    GIGABYTE => 1073741824,
    TERABYTE => 1099511627776,
    PETABYTE => 1125899906842624,
    EXABYTE  => 1152921504606846976
};

sub bytes {
    my $number = shift;
    if ( $number =~ /^([0-9]+)([a-zA-Z])[a-zA-Z]*$/ ) {
        if ( "\U$2" eq 'K' ) {
            $number = $1 * KILOBYTE;
        } elsif ( "\U$2" eq 'M' ) {
            $number = $1 * MEGABYTE;
        } elsif ( "\U$2" eq 'G' ) {
            $number = $1 * GIGABYTE;
        } elsif ( "\U$2" eq 'T' ) {
            $number = $1 * TERABYTE;
        } elsif ( "\U$2" eq 'P' ) {
            $number = $1 * PETABYTE;
        } elsif ( "\U$2" eq 'E' ) {
            $number = $1 * EXABYTE;
        }
    }
    return $number;
}

#------------------------------------------------------------------------------
